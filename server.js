const express = require("express");
const bodyParser = require("body-parser");
const fetch = require("node-fetch");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

// === –ö–û–ù–§–ò–ì ===
const API_KEY = "–í–ê–®-API-–ö–õ–Æ–ß";
const CRM_URL = "https://–°–í–û–ô-URL.retailcrm.ru";
const LOYALTY_ID = 4;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ E.164 ===
function formatPhone(input) {
  const digits = input.replace(/\D/g, "");
  if (digits.startsWith("8")) {
    return "+7" + digits.slice(1);
  } else if (digits.startsWith("7")) {
    return "+7" + digits.slice(1);
  } else if (digits.startsWith("9")) {
    return "+7" + digits;
  } else if (digits.startsWith("0")) {
    return "+7" + digits.slice(1);
  } else if (!digits.startsWith("+")) {
    return "+" + digits;
  }
  return digits;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É ===
async function findCustomerByPhone(phone) {
  const query = new URLSearchParams({
    apiKey: API_KEY,
    phone: phone,
  });

  const res = await fetch(`${CRM_URL}/api/v5/customers?${query}`);
  const data = await res.json();

  if (!data.success || !data.customers || !data.customers.length) {
    console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return null;
  }

  const customer = data.customers[0];
  console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É:", customer);
  return customer;
}

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ===
app.post("/submit", async (req, res) => {
  const { name, email, phone } = req.body;
  const formattedPhone = formatPhone(phone);

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    const createRes = await fetch(`${CRM_URL}/api/v5/customers/create`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        apiKey: API_KEY,
        customer: JSON.stringify({
          externalId: formattedPhone,
          firstName: name,
          email,
          phones: [{ number: formattedPhone }],
        }),
      }),
    });

    const createData = await createRes.json();
    console.log("CRM create response:", createData);

    if (!createData.success) {
      return res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.");
    }

    // 2. –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    console.log("‚è≥ –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É...");
    await new Promise((r) => setTimeout(r, 2000));
    const customer = await findCustomerByPhone(formattedPhone);

    if (!customer || !customer.externalId) {
      return res
        .status(500)
        .send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.");
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const loyaltyRes = await fetch(`${CRM_URL}/api/v5/loyalty/account/create`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        apiKey: API_KEY,
        loyaltyAccount: JSON.stringify({
          phone: formattedPhone,
          cardNumber: formattedPhone,
          loyalty: { id: LOYALTY_ID },
          customer: { externalId: formattedPhone },
        }),
      }),
    });

    const loyaltyData = await loyaltyRes.json();
    console.log("üì¶ Loyalty response:", loyaltyData);

    if (!loyaltyData.success) {
      return res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å.");
    }

    res.send(
      "<h2>‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CRM –∏ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.</h2>"
    );
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    res.status(500).send("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
